---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

// Utility function to check if a college has Social Work programs
function hasSocialWorkProgram(college: any): boolean {
  const completions = college.data.completions_2023_2024;
  if (!completions) return false;

  // Check for general Social Work programs
  const socialWorkPrograms = completions["Public Administration and Social Service Professions"]?.["Social Work"];
  
  // Check for Clinical/Medical Social Work programs
  const clinicalSocialWork = completions["Health Professions and Related Programs"]?.["Clinical/Medical Social Work"];
  
  // Return true if any Social Work program has completions > 0
  const hasSocialWork = socialWorkPrograms && Object.values(socialWorkPrograms).some((count: any) => count > 0);
  const hasClinicalSocialWork = clinicalSocialWork && Object.values(clinicalSocialWork).some((count: any) => count > 0);
  
  return hasSocialWork || hasClinicalSocialWork;
}

// Filter colleges to only those with Social Work programs
const allColleges = await getCollection('colleges');
const colleges = allColleges.filter(hasSocialWorkProgram);

const seoData = {
  title: `Active Social Work Programs - ${colleges.length} Colleges with BSW/MSW Graduates | BSW Navigator`,
  description: `Find ${colleges.length} colleges and universities with active Social Work programs that graduated students in 2023-2024. Compare BSW and MSW programs, tuition costs, and program outcomes.`,
  keywords: 'active social work programs, BSW graduates, MSW graduates, social work colleges 2024, proven social work programs, social work completions',
  canonical: 'https://bswdegree.org/colleges/',
  ogType: 'website'
};

---

<Layout seo={seoData}>
  <Header currentPage="colleges" />
  
  <main class="container mx-auto px-4 sm:px-6 lg:px-8 py-8 md:py-12">
    
    <div class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-extrabold text-stone-900 tracking-tight">
        Active Social Work <span class="text-emerald-700">Programs</span>
      </h1>
      <p class="mt-4 max-w-3xl mx-auto text-lg text-stone-600">
        Colleges and universities with active Social Work programs that graduated students in 2023-2024. 
        These institutions offer proven BSW and MSW programs with recent completions.
      </p>
      <div class="mt-6 inline-flex items-center px-4 py-2 bg-emerald-100 text-emerald-800 rounded-full text-sm font-medium">
        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>
        Showing only colleges with 2023-2024 Social Work graduates
      </div>
    </div>

    <div class="mb-8">
      <div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
        <div class="flex-1 max-w-md">
          <input 
            type="text" 
            id="search-input" 
            placeholder="Search colleges..." 
            class="w-full px-4 py-2 border border-stone-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
          >
        </div>
        <div class="flex gap-2">
          <select id="type-filter" class="px-4 py-2 border border-stone-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500">
            <option value="">All Types</option>
            <option value="Public">Public</option>
            <option value="Private">Private</option>
          </select>
          <select id="size-filter" class="px-4 py-2 border border-stone-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500">
            <option value="">All Sizes</option>
            <option value="small">Small (&lt; 5,000)</option>
            <option value="medium">Medium (5,000-15,000)</option>
            <option value="large">Large (&gt; 15,000)</option>
          </select>
        </div>
      </div>
    </div>

    <div class="mb-6 flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
      <p class="text-stone-600">
        Showing <span id="results-start">1</span>-<span id="results-end">6</span> of <span id="results-total">{colleges.length}</span> colleges with active Social Work programs
      </p>
      <div class="flex items-center gap-2">
        <label for="per-page-select" class="text-sm text-stone-600">Per page:</label>
        <select id="per-page-select" class="px-3 py-1 border border-stone-300 rounded focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 text-sm">
          <option value="6" selected>6</option>
          <option value="12">12</option>
          <option value="24">24</option>
          <option value="all">All</option>
        </select>
      </div>
    </div>

    <div id="colleges-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {colleges.map((college) => {
        const { id, institution, estimated_expenses } = college.data;
        const isPublic = institution.type.includes('Public');
        const studentSize = institution.student_population.total < 5000 ? 'small' : 
                           institution.student_population.total < 15000 ? 'medium' : 'large';
        
        return (
          <div 
            class="college-card bg-white rounded-xl shadow-lg border border-stone-200 hover:shadow-xl transition-shadow duration-300"
            data-name={institution.name.toLowerCase()}
            data-type={isPublic ? 'Public' : 'Private'}
            data-size={studentSize}
          >
            <div class="p-6">
              <div class="flex items-start justify-between mb-4">
                <h3 class="text-lg font-semibold text-stone-900 line-clamp-2">
                  {institution.name}
                </h3>
                <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                  isPublic 
                    ? 'bg-blue-100 text-blue-800' 
                    : 'bg-purple-100 text-purple-800'
                }`}>
                  {isPublic ? 'Public' : 'Private'}
                </span>
              </div>
              
              <div class="space-y-2 text-sm text-stone-600 mb-4">
                <p>
                  <span class="font-medium">Location:</span> {institution.address.split(',').slice(-2).join(',').trim()}
                </p>
                <p>
                  <span class="font-medium">Students:</span> {institution.student_population.total.toLocaleString()}
                </p>
                <p>
                  <span class="font-medium">Setting:</span> {institution.campus_setting}
                </p>
                <p>
                  <span class="font-medium">Student-Faculty Ratio:</span> {institution.student_faculty_ratio}
                </p>
              </div>

              <div class="mb-4">
                <div class="flex justify-between items-center text-sm">
                  <span class="font-medium text-stone-700">Tuition (In-State):</span>
                  <span class="font-semibold text-emerald-700">
                    ${estimated_expenses['2024-2025'].tuition_and_fees.in_state.toLocaleString()}
                  </span>
                </div>
                {!isPublic || estimated_expenses['2024-2025'].tuition_and_fees.out_of_state !== estimated_expenses['2024-2025'].tuition_and_fees.in_state ? (
                  <div class="flex justify-between items-center text-sm mt-1">
                    <span class="font-medium text-stone-700">Tuition (Out-of-State):</span>
                    <span class="font-semibold text-stone-600">
                      ${estimated_expenses['2024-2025'].tuition_and_fees.out_of_state.toLocaleString()}
                    </span>
                  </div>
                ) : null}
              </div>

              <a 
                href={`/colleges/${id}/`}
                class="w-full bg-emerald-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-emerald-700 transition-colors duration-200 inline-block text-center"
              >
                View Details
              </a>
            </div>
          </div>
        );
      })}
    </div>

    <!-- Pagination Controls -->
    <div id="pagination" class="mt-8 flex items-center justify-center">
      <nav class="flex items-center space-x-2" aria-label="Pagination">
        <button 
          id="prev-page" 
          class="px-3 py-2 text-sm font-medium text-stone-500 bg-white border border-stone-300 rounded-md hover:bg-stone-50 hover:text-stone-700 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Previous
        </button>
        
        <div id="page-numbers" class="flex space-x-1">
          <!-- Page numbers will be dynamically generated -->
        </div>
        
        <button 
          id="next-page" 
          class="px-3 py-2 text-sm font-medium text-stone-500 bg-white border border-stone-300 rounded-md hover:bg-stone-50 hover:text-stone-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Next
          <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </nav>
    </div>

    <div id="no-results" class="hidden text-center py-12">
      <div class="text-stone-400">
        <svg class="mx-auto h-12 w-12 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"></path>
        </svg>
        <h3 class="text-lg font-medium text-stone-900 mb-2">No colleges found</h3>
        <p class="text-stone-600">Try adjusting your search criteria.</p>
      </div>
    </div>

  </main>

  <Footer />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const typeFilter = document.getElementById('type-filter') as HTMLSelectElement;
    const sizeFilter = document.getElementById('size-filter') as HTMLSelectElement;
    const perPageSelect = document.getElementById('per-page-select') as HTMLSelectElement;
    const collegesGrid = document.getElementById('colleges-grid') as HTMLElement;
    const noResults = document.getElementById('no-results') as HTMLElement;
    const pagination = document.getElementById('pagination') as HTMLElement;
    const prevButton = document.getElementById('prev-page') as HTMLButtonElement;
    const nextButton = document.getElementById('next-page') as HTMLButtonElement;
    const pageNumbers = document.getElementById('page-numbers') as HTMLElement;
    const resultsStart = document.getElementById('results-start') as HTMLElement;
    const resultsEnd = document.getElementById('results-end') as HTMLElement;
    const resultsTotal = document.getElementById('results-total') as HTMLElement;
    const collegeCards = Array.from(document.querySelectorAll('.college-card')) as HTMLElement[];

    let currentPage = 1;
    let itemsPerPage = 12;
    let filteredCards: HTMLElement[] = [];

    function filterColleges() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      const typeValue = typeFilter.value;
      const sizeValue = sizeFilter.value;

      filteredCards = collegeCards.filter(card => {
        const name = card.dataset.name || '';
        const type = card.dataset.type || '';
        const size = card.dataset.size || '';

        const matchesSearch = !searchTerm || name.includes(searchTerm);
        const matchesType = !typeValue || type === typeValue;
        const matchesSize = !sizeValue || size === sizeValue;

        return matchesSearch && matchesType && matchesSize;
      });

      currentPage = 1; // Reset to first page when filtering
      updateDisplay();
    }

    function updateDisplay() {
      const totalItems = filteredCards.length;
      const totalPages = itemsPerPage === -1 ? 1 : Math.ceil(totalItems / itemsPerPage);

      // Hide all cards first
      collegeCards.forEach(card => card.style.display = 'none');

      if (totalItems === 0) {
        collegesGrid.style.display = 'none';
        noResults.classList.remove('hidden');
        pagination.style.display = 'none';
        resultsStart.textContent = '0';
        resultsEnd.textContent = '0';
        resultsTotal.textContent = '0';
        return;
      }

      // Show filtered cards for current page
      collegesGrid.style.display = 'grid';
      noResults.classList.add('hidden');

      let startIndex, endIndex;
      if (itemsPerPage === -1) {
        // Show all items
        startIndex = 0;
        endIndex = totalItems;
        pagination.style.display = 'none';
      } else {
        startIndex = (currentPage - 1) * itemsPerPage;
        endIndex = Math.min(startIndex + itemsPerPage, totalItems);
        pagination.style.display = totalPages > 1 ? 'flex' : 'none';
      }

      for (let i = startIndex; i < endIndex; i++) {
        filteredCards[i].style.display = 'block';
      }

      // Update results count
      resultsStart.textContent = totalItems > 0 ? (startIndex + 1).toString() : '0';
      resultsEnd.textContent = endIndex.toString();
      resultsTotal.textContent = totalItems.toString();

      if (itemsPerPage !== -1) {
        updatePaginationControls(totalPages);
      }
    }

    function updatePaginationControls(totalPages: number) {
      // Update prev/next buttons
      prevButton.disabled = currentPage === 1;
      nextButton.disabled = currentPage === totalPages;

      // Generate page numbers
      pageNumbers.innerHTML = '';
      
      const maxVisiblePages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
      let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
      
      // Adjust start if we're near the end
      if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
      }

      // Add first page if not visible
      if (startPage > 1) {
        addPageButton(1);
        if (startPage > 2) {
          addEllipsis();
        }
      }

      // Add visible pages
      for (let i = startPage; i <= endPage; i++) {
        addPageButton(i);
      }

      // Add last page if not visible
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          addEllipsis();
        }
        addPageButton(totalPages);
      }
    }

    function addPageButton(pageNum: number) {
      const button = document.createElement('button');
      button.textContent = pageNum.toString();
      button.className = `px-3 py-2 text-sm font-medium border rounded-md ${
        pageNum === currentPage
          ? 'bg-emerald-600 text-white border-emerald-600'
          : 'text-stone-500 bg-white border-stone-300 hover:bg-stone-50 hover:text-stone-700'
      }`;
      button.addEventListener('click', () => {
        currentPage = pageNum;
        updateDisplay();
      });
      pageNumbers.appendChild(button);
    }

    function addEllipsis() {
      const ellipsis = document.createElement('span');
      ellipsis.textContent = '...';
      ellipsis.className = 'px-3 py-2 text-sm text-stone-500';
      pageNumbers.appendChild(ellipsis);
    }

    // Event listeners
    searchInput.addEventListener('input', filterColleges);
    typeFilter.addEventListener('change', filterColleges);
    sizeFilter.addEventListener('change', filterColleges);
    
    perPageSelect.addEventListener('change', () => {
      itemsPerPage = perPageSelect.value === 'all' ? -1 : parseInt(perPageSelect.value);
      currentPage = 1;
      updateDisplay();
    });

    prevButton.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updateDisplay();
      }
    });

    nextButton.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updateDisplay();
      }
    });

    // Initialize
    filteredCards = collegeCards;
    updateDisplay();
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>